1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
1.1 Мета роботи

Для початку роботи необхідно визначити мету. Мета даної лабораторної роботи - розробити серверну частину для програмної системи для контролю акваріумів.
Окрім цього необхідно навести опис прийнятих інженерних рішень, представити загальну архітектуру системи, показати будову серверних компонентів та структуру бази даних.

1.2 Аналіз предметної області

Для початку роботи необхідно провести концептуальне моделювання предметної області.
З використанням програмної системи користувачі повинні мати можливість зберігати, редагувати, видаляти, отримувати звіти досліджень та їх аналітику за інформацією, що стосується контролю за акваріумами та мешканцями які в них проживають.
Система матиме розподіл за двома ролями користувачів:
-	Звичайний користувач;
-	Адміністратор системи.

1.3 Аналіз інформаційних потреб користувачів

Наступним кроком необхідно проаналізувати інформаційні потреби обох видів користувачів системи.
Для цього було розроблено UML діаграму прецедентів для звичайного користувача та адміністратора (див. А.1).
У програмній системі користувач матиме можливість:
-	Взаємодіяти з особистим акаунтом:
-	Реєструватись у системі
-	Входити/виходити з системи
-	Переглядати/редагувати інформацію профілю
-	Взаємодіяти з аналітичними звітностями:
-	Переглядати створені аналітичні звітності
-	Взаємодіяти з розкладами годування:
-	Переглядати список розкладів годування
-	Додавати нових розкладів
-	Редагувати існуючі розклади
-	Видаляти розклади
-	Взаємодіяти з звітами досліджень:
-	Формувати звіт дослідження на основі інформації з датчиків, та про тварин і середовища в якому вони живуть
-	На основі сформованого звіту формувати аналітичну звітність
-	Взаємодія з датчиками:
-	Переглядати список доданих датчиків
-	Додавати новий датчик що буде слугувати для досліджень
-	Видаляти непотрібні датчики
-	Взаємодія з акваріумами:
-	Переглядати список акваріумів
-	Перегляд конкретного акваріуму
-	Перегляд списку мешканців в конкретному акваріумі
-	Додавання мешканців до конкретного акваріуму
-	Редагування інформації щодо мешканців в конкретному акваріумі
-	Видалення мешканців з конкретного акваріуму
В той же час адміністратор матиме можливість:
-	Керувати користувачами в системі:
-	Переглядати список користувачів
-	Додавати нових користувачів
-	Редагувати існуючих користувачів
-	Видаляти користувачів
-	Керувати переліком акваріумів для користувачів:
-	Переглядати
-	Додавати нові
-	Редагувати існуючі
-	Видаляти



2 ПРОЕКТУВАННЯ БАЗИ ДАНИХ
2.1 Проектування бази даних з використанням ER діаграми

Для проектування структури бази даних програмної системи було розроблено ER діаграму (див. А.3).
База даних міститиме 8 таблиць та 31 неключовий атрибут. Нижче наведено детальний опис усіх зв’язків між таблицями в базі даних.
Один користувач може мати багато акваріумів за якими він доглядає, але один акваріум який адміністратор створює кожному користувачу окремо належить лише одному користувачу. Багато мешканців можуть належати до одного акваріуму, проте у кожного мешканця лише один акваріум в якому він проживає на даний час. Багато розкладів годування (активних та неактивних) можуть належати до одного акваріуму, проте у кожного розкладу може бути лише один акваріум, для якого його назначили. На основі одного звіту дослідження можна сформувати лише один аналіз дослідження, зв’язок 1 до 1. Один звіт з дослідження акваріуму може належати лише одному акваріуму, але один акваріум може мати багато звітів досліджень. Для зв’язку між датчиками і звітом дослідження використовується проміжна таблиця для відношення багато до багатьох.



3 РОЗРОБКА СЕРВЕРНОЇ ЧАСТИНИ
3.1 Архітектура системи

Для початку роботи було розроблено UML діаграму розгортання (див. А.4). Програмна система міститиме 5 структурних частин:
-	Серверна частина
-	База даних
-	Веб застосунок
-	Мобільний застосунок
-	IoT девайс
З використанням діаграми було визначено зв’язки між вищезазначеними структурними частинами, а також протоколи їх взаємодії між собою.
Також для системи було розроблено UML діаграму станів (див. А.2).

3.2 REST специфікація

Аналітична звітність (AnalysisReport)
-	GET /api/AnalysisReport: Отримання списку всіх аналітичних звітностей поточного користувача.
-	POST /api/AnalysisReport: Створення нової аналітичної звітності
-	GET /api/AnalysisReport/{id}: Отримання конкретної аналітичної звітності.
-	PUT /api/AnalysisReport/{id}: Редагування конкретної аналітичної звітності.
-	DELETE /api/AnalysisReport/{id}: Видалення конкретної аналітичної звітності.
Розклад годування (FeedingSchedule)
-	GET /api/FeedingSchedule: Отримання списку всіх розкладів годування поточного користувача.
-	POST /api/FeedingSchedule: Створення нового розкладу годування
-	GET /api/FeedingSchedule/{id}: Отримання конкретного розкладу годування.
-	PUT /api/FeedingSchedule/{id}: Редагування конкретного розкладу годування.
-	DELETE /api/FeedingSchedule/{id}: Видалення конкретного розкладу годування.
Мешканець (Inhabitant)
-	GET /api/Inhabitant/aquarium/{id}: Отримати перелік мешканців в конкретному акваріумі поточного користувача.
-	GET /api/Inhabitant/{id}: Отримати конкретного мешканця.
-	POST /api/Inhabitant: Додати мешканця для поточного користувача до обраного акваріуму.
-	PUT /api/Inhabitant/{id}: Оновити мешканця для поточного користувача із акваріуму.
-	DELETE /api/Inhabitant/{id}: Видалити мешканця для поточного користувача із акваріуму
Акваріум (Aquarium)
-	GET /api/Aquarium/current-user: Отримати перелік акваріумів поточного користувача.
-	GET /api/Aquarium/user/{id}: Отримати перелік акваріумів конкретного користувача.
-	POST /api/Aquarium/user/{id}: Додати новий акваріум конкретному користувачу.
-	PUT /api/Aquarium/{id}/user/{userId}: редагувати конкретний акваріум конкретного користувача.
-	GET /api/Aquarium/{id}: Отримати конкретний акваріум.
-	DELETE /api/Aquarium/{id}: Видалити конкретний акваріум.
Звіт дослідження (ResearchReport)
-	GET /api/ResearchReport: Отримати перелік звітів дослідження поточного користувача.
-	POST /api/ResearchReport: Створити новий звіт дослідження для поточного користувача.
-	GET /api/ResearchReport/{id}: Отримати конкретний звіт дослідження поточного користувача.
-	PUT /api/ResearchReport/{id}: Відредагувати конкретний звіт дослідження поточного користувача.
-	DELETE /api/ResearchReport/{id}: Видалити конкретний звіт дослідження поточного користувача.
Дані датчика (SensorData)
-	GET /api/SensorData: Отримати перелік датчиків які використовує поточний користувач.
-	POST /api/SensorData: Додати новий датчик  для поточного користувача.
-	GET /api/SensorData /{id}: Отримати конкретний датчик поточного користувача.
-	PUT /api/SensorData/{id}: Редагувати конкретний датчик поточного користувача.
-	DELETE /api/SensorData/{id}: Видалити конкретний датчик поточного користувача.
Користувач (User)
-	POST /api/User/login: Автентифікація користувача за допомогою електронної пошти та пароля.
-	POST /api/User/register: Реєстрація нового користувача.
-	GET /api/User/userinfo: Отримати інформацію профілю поточного користувача.
-	PUT /api/User/update: Оновити профіль поточного користувача.
-	POST /api/User/logout: Вихід поточного користувача з системи.
-	GET /api/User/all: Отримати перелік усіх користувачів системи.
-	DELETE /api/User/{userId}: Видалити конкретного користувача із системи.
-	POST /api/User/add: Додати користувача до системи.
-	PUT /api/User/update/{userId}: Відредагувати інформацію про конкретного користувача системи.

3.3 Розробка сервера

У якості технології для розробки серверної частини було використано ASP.NET Core Web API та мову програмування C#. У якості середовища розробки було використано Visual Studio.

3.3.1 База даних та підключення

Для роботи з базою даних було використано pgAdmin. Для взаємодії з базою даних з серверної частини було використано Entity Framework Core.
Для створення таблиць в базі даних було використано code-first підхід: створено класи в програмі та використано міграції на підключену базу даних.

3.3.2 Структура серверу

Точкою входу на сервер є контролери. Після отримання запиту клієнта контролери передають управління сервісам. Сервіси відповідають за бізнес логіку додатку. Варто зазначити, що для взаємодії з базою даних сервіси використовують репозиторії, які вже безпосередньо підтримують зв’язок з базою даних через Entity Framework.

3.3.3 Автентифікація

Під час реєстрації новий користувач записується до бази даних (див. Б.3, рядок 96). Пароль користувача хешується та в базі зберігається лише хеш, для забезпечення безпеки.
Для того щоб мати можливість відслідковувати сесію користувача після реєстрації одразу проводиться вхід до системи, під час якого до файлів cookies додається ідентифікатор поточного користувача та його роль (див. Б.3, рядок 105 - 108).
Під час виходу з системи ця інформація очищується з файлів cookies (див. Б.3, рядок 72).

3.3.4 Управління датчиками

Користувач має можливість додавати датчики які будуть надсилати інформацію для формування звітів. Сервер від клієнту отримує інформацію про температуру, рівень води, кислотність води, освітленість акваріуму або про стан чи активність мешканця в залежності від типу датчика (див. Б.7, рядок 54). 
Користувач також має можливість переглядати додані датчики (див. Б.7, рядок 22), а також видаляти непотрібні датчики за необхідності (див. Б.7, рядок 67).

3.3.5 Управління акваріумами

Адміністратор має можливість додавати нові акваріуми конкретним користувачам до бази даних. Під час цього процесу до бази даних додається новий акваріум, яке може побачити у себе користувач, якому було назначено цей акваріум для контролю (див. Б.2, рядок 78).
Адміністратор також може переглядати список усіх доданих акваріумів для конкретних користувачів (див. Б.2, рядок 60), редагувати інформацію про будь-який акваріум (див. Б.2, рядок 98), або ж зовсім його видалити (див. Б.2, рядок 123). 

3.3.6 Взаємодія з мешканцями акваріумів

Користувач має можливість додати нового мешканця в один із своїх акваріумів для подальшого догляду, при цьому обов’язково треба обрати у якому акваріумі живе цей мешканець обравши із вже існуючих варіантів (див. Б.5, рядок 62). 
Також після додавання мешканців, користувач може переглянути усіх мешканців в конкретних акваріумах яких він зараз доглядає (див. Б.5, рядок 31), редагувати будь якого з них, наприклад бажаючи дописати додаткові замітки (див. Б.5, рядок 90), чи зовсім видалити (див. Б.5, рядок 115).

3.3.7 Взаємодія з розкладами годування

Користувач має можливість додати новий розклад годування для одного із своїх акваріумів, при цьому обов’язково треба обрати для якого акваріуму назначається цей розклад, обравши із вже існуючих варіантів і чи активний цей розклад (див. Б.4, рядок 62). 
Також після додавання розкладів годування, користувач може переглянути усі розклади для акваріумів (див. Б.4, рядок 29), редагувати будь який з них, наприклад бажаючи поставити той чи інший розклад активним або ні (див. Б.4, рядок 92), чи зовсім видалити (див. Б.4, рядок 122).

3.3.8 Звіти досліджень

Користувач може формувати звіти досліджень. Сервер отримує інформацію про акваріуми та їх мешканців, що досліджувалися та відповідну інформацію з датчиків, та все це групується в один запис що відповідає звіту з дослідження даних за останній час. Цей запис додається до бази даних (див. Б.6, рядок 43).

3.3.9 Управління аналітичними звітностями

Користувач може формувати аналітичну звітність на основі звіту дослідження. Аналітична звітність отримує зі звіту інформацію про акваріуми та їх мешканців, а також отримує інформацію з дачиків які брали участь у дослідженні, на основі зібраних даних формується опис загальних тенденцій які спостерігаються у порівнянні зі звичайним станом акваріуму та його мешканців, а також формуються рекомендації щодо дій на основі проаналізованих тенденцій (див. Б.1, рядок 82).
Також користувач може переглядати раніше сформовані аналітичні звітності (див. Б.1, рядок 40), та видаляти їх (див. Б.1, рядок 75).

3.4 Тестування

Для тестування функціональності сервера його можливості було протестовано з використанням Swagger. Було виявлено, що функціонал системи працює коректно та стабільно.


ПЕРЕЛІК ДЖЕРЕЛ
1.	DEMO відео. URL: https://youtu.be/B53rPOysx3w?si=cfEoasyZHA6Tctwf
2.	Репозиторій проекту. URL: https://github.com/NureVolnykovKyrylo/apz-pzpi-21-2-volnykov-kyrylo
