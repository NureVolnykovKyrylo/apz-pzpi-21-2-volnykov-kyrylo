1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
1.1 Мета роботи

Метою лабораторної роботи є розробка клієнтської частини для  системи для контролю акваріумів, опис прийнятих інженерних рішень, побудова діаграм. Необхідно представити будову системи та її взаємодію з іншими частинами системи.

1.2 Моделювання програмної системи

З використанням програмної системи користувачі повинні мати можливість зберігати, редагувати, видаляти, отримувати звіти досліджень та їх аналітику за інформацією, що стосується контролю за акваріумами та мешканцями які в них проживають.
Система матиме розподіл за двома ролями користувачів:
-	Звичайний користувач;
-	Адміністратор системи.
Було розроблено UML діаграму прецедентів для користувача та адміністартора (див. А.1).
У програмній системі користувач матиме можливість:
-	Взаємодіяти з особистим акаунтом:
-	Реєструватись у системі
-	Входити/виходити з системи
-	Взаємодіяти з аналітичними звітностями:
-	Переглядати створені аналітичні звітності
-	Взаємодіяти з звітами досліджень:
-	Формувати звіт дослідження на основі інформації з датчиків, та про мешканців і акваріуми в якому вони живуть
-	На основі сформованого звіту формувати аналітичну звітність
-	Взаємодія з акваріумами:
-	Переглядати список акваріумів
-	Перегляд конкретного акваріуму
-	Перегляд списку мешканців в конкретному акваріумі
-	Додавання мешканців до конкретного акваріуму
-	Редагування інформації щодо мешканців в конкретному акваріумі
-	Видалення мешканців з конкретного акваріуму
В той же час адміністратор матиме можливість:
-	Керувати користувачами в системі:
-	Переглядати список користувачів
-	Редагувати існуючих користувачів
-	Видаляти користувачів
-	Керувати переліком акваріумів для користувачів:
-	Переглядати
-	Додавати нові
-	Редагувати існуючі
-	Видаляти

2 ПРОГРАМНА РЕАЛІЗАЦІЯ
2.1 Архітектура програмної системи

Для розробки клієнтської частини було використано бібліотеку React, мову програмування Javascript та мови HTML та CSS.
Для дизайну використовується компонентна бібліотека MUI.
Проект має наступну архітектуру:
-	Api services – містять логіку для взаємодії із сервером.
-	Components – відповідають за представлення у системі.
-	Public files – відповідають за зберігання публічно доступних файлів для системи, наприклад файли із локалізацією.
-	Utils – містять допоміжну логіку для системи.
Ця клієнтська частина взаємодіє із серверною частиною реалізованою за допомогою ASP.NET Web Api, завдяки використанню POST, PUT, GET, DELETE HTTP-запитів. Також було створено UML діаграму компонент для демонстрації структури компонентів розробленої системи (див. А.3).

2.2 Програмна розробка системи

Основним функціоналом програмної системи є перегляд інформації про акваріуми та їх мешканців, створення звітів дослідження по цим акваріумам та їх мешканцям, і на основі звітів дослідження створення аналітичних звітів із виявленими тенденціями та рекомендаціями щодо дій.
Було розроблено діаграму станів (див. А.4) та UML діаграму активності (див. А.2) задля можливості демонстрації взаємодії користувача та програмної системи.
2.2.1 Компонент AdminAquarium

React-компонент призначений для адміністрування акваріумів користувача. Він використовує React Hooks (`useState`, `useEffect`) для управління станом і побічними ефектами, а також бібліотеку Material-UI для створення інтерфейсу. Ключові моменти: компонент отримує список акваріумів користувача через API-запит (`getAquariumsForUser`) (див. Б.1, рядки 5, 24), відображає їх у вигляді списку з можливістю додавання нового акваріуму, оновлення та видалення існуючих (див Б.1, рядки 61-97). Важливо, що компонент підтримує інтернаціоналізацію з використанням `react-i18next`, а навігація між різними сторінками (додавання, оновлення, перегляд акваріумів) реалізована за допомогою `react-router-dom`. Обробка помилок здійснюється через `try`/`catch`, а візуальне оформлення забезпечується компонентами Material-UI, такими як `Button`, `List`, `Divider.

2.2.2 Компонент UserAquarium

React-компонент UserAquarium схожий за структурою з попереднім AdminAquarium, але призначений для звичайних користувачів, а не для адміністраторів. Основні відмінності: компонент отримує ідентифікатор користувача (userId) і використовує його для отримання списку акваріумів користувача через API (див Б.2, рядки 17, 20-30). На відміну від адміністративного інтерфейсу, тут користувач не має можливості додавати, оновлювати або видаляти акваріуми - він може лише переглядати їх деталі та перейти до управління мешканцями кожного акваріуму (див Б.2, рядки 49-78, відсутність кнопок для додавання, оновлення та видалення). Інтерфейс також побудований з використанням Material-UI, з підтримкою інтернаціоналізації через react-i18next. Навігація реалізована за допомогою react-router-dom, дозволяючи перехід до сторінок перегляду акваріуму та управління його мешканцями. Обробка помилок та оновлення стану компонента здійснюються так само, як і в AdminAquarium.

2.2.3 Компонент Inhabitant

React-компонент Inhabitant відповідає за відображення та управління списком мешканців певного акваріуму. Він використовує React Hooks (useState, useEffect) для керування станом і життєвим циклом компонента, Material-UI для створення інтерфейсу користувача, react-i18next для інтернаціоналізації тексту та react-router-dom для навігації. Компонент отримує ідентифікатор акваріуму з URL-параметрів, завантажує список його мешканців з API при монтуванні та оновлює цей список при зміні ідентифікатора (див. Б.3, рядки 16-17, 19-30). Він відображає список мешканців у вигляді переліку, де кожен елемент має кнопки для оновлення, видалення та перегляду інформації про мешканця (див. Б.3, рядки 59-96). Також є кнопка для додавання нових мешканців (див. Б.3, рядки 47-55). При натисканні на кнопку видалення, компонент викликає відповідну API-функцію та оновлює локальний стан, видаляючи мешканця зі списку (див. Б.3, рядки 32-40, 77-84).

2.2.4 Компонент ResearchReport

Цей React-компонент відповідає за відображення та управління списком звітів дослідження. Він використовує React Hooks для управління станом і ефектами, Material-UI для створення інтерфейсу та react-i18next для інтернаціоналізації. При завантаженні, компонент отримує всі дослідницькі звіти та відповідні типи акваріумів з API, зберігаючи їх у стані (див. Б.4, рядки 21-42). Користувач може фільтрувати звіти за типом акваріуму, використовуючи текстове поле (див. Б.4, рядки 18, 54-58, 75-81). Кожен звіт у списку відображається з його ідентифікатором та типом акваріуму, а також має кнопку для видалення (див. Б.4, рядки 84-104). При натисканні на кнопку видалення, компонент видаляє звіт через API та оновлює локальний стан (див. Б.4, рядки 44-52, 93-102). Також є кнопка для додавання нових звітів, яка веде на іншу сторінку (див. Б.4, рядки 65-73). Компонент ефективно обробляє асинхронні запити, обробляє помилки та забезпечує зручний інтерфейс для роботи з звітами дослідження.

2.2.5 Компонент AnalysisReport

Цей React компонент відображає список аналітичних звітів. Він використовує React Router для навігації та Material UI для візуальних елементів. Спочатку компонент отримує всі створені аналітичні звіти, потім для кожного з них знаходить пов'язаний звіт про дослідження та тип акваріума, за яким проводилося дослідження (див. Б.5, рядки 24-52, 26-27, 29-34, 36-45). Користувач може фільтрувати звіти за типом акваріума (див. Б.5, рядки 20, 68-75, 92-98). Також компонент дозволяє додавати нові аналітичні звіти (див. Б.5, рядки 82-90), переглядати існуючі (див. Б.5, рядки 64-66, 124-132) та видаляти їх (див. Б.5, рядки 54-62, 115-123).

2.3 Висновки

У результаті виконання цієї лабораторної роботи мною було розроблено клієнтську частину, що є частиною системи для контролю акваріумів, описано архітектуру системи, програмну реалізацію, описано фізичну схему, її взаємодію з іншими частинами системи, створено діаграми.
 
ПЕРЕЛІК ДЖЕРЕЛ
1.	DEMO відео. URL: https://youtu.be/Fm4nQxgsVuw?si=ByucJjwYZMk8zqPz
2.	Репозиторій проекту. URL: https://github.com/NureVolnykovKyrylo/apz-pzpi-21-2-volnykov-kyrylo
