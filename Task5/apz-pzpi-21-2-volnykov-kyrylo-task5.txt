1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
1.1 Мета роботи

Метою лабораторної роботи є розробка клієнтської/mobile частини для  системи для контролю акваріумів, опис прийнятих інженерних рішень, побудова діаграм. Необхідно представити будову системи та її взаємодію з іншими частинами системи.

1.2 Моделювання програмної системи

З використанням програмної системи користувачі повинні мати можливість зберігати, редагувати, видаляти, отримувати інформацію про акваріуми, графіки годування та датчики, які стосуються контролю за акваріумами та мешканцями які в них проживають.
Система матиме розподіл за двома ролями користувачів:
-	Звичайний користувач;
-	Адміністратор системи.
Для цього було розроблено UML діаграму прецедентів для звичайного користувача та адміністратора (див. А.1).
У програмній системі користувач матиме можливість:
-	Взаємодіяти з особистим акаунтом:
-	Реєструватись у системі
-	Входити/виходити з системи
-	Переглядати/редагувати інформацію профілю
-	Взаємодіяти з розкладами годування:
-	Переглядати список розкладів годування
-	Додавати нових розкладів
-	Редагувати існуючі розклади
-	Видаляти розклади
-	Взаємодія з датчиками:
-	Переглядати список доданих датчиків
-	Додавати новий датчик що буде слугувати для досліджень
-	Видаляти непотрібні датчики
-	Взаємодія з акваріумами:
-	Переглядати список акваріумів
В той же час адміністратор матиме можливість:
-	Взаємодіяти з переліком акваріумів для користувачів:
-	Переглядати перелік акваріумів

2 ПРОГРАМНА РЕАЛІЗАЦІЯ
2.1 Архітектура програмної системи

Для розробки клієнтської частини було використано бібліотеку Jetpack Compose, мову програмування Kotlin та Android Studio IDE. 
Для дизайну використовується Material Design 3, вбудований у Jetpack Compose.
Проект має наступну архітектуру:
-	Api – містить інтерфейси та імплементації для взаємодії з віддаленим API через HTTP-клієнт Ktor.
-	Models – визначає моделі даних, такі як User та Aquarium та інші.
-	Network – містить конфігурацію HTTP-клієнта та провайдера клієнта.
-	Pages – відповідають за представлення різних екранів додатку, таких як сторінка входу, реєстрації та список акваріумів.
-	Components – містить повторно використовувані компоненти користувацького інтерфейсу, такі як AquariumCard та інші.
-	ViewModels – інкапсулюють стани та логіку додатку, використовуючи архітектурний патерн ViewModel. Наприклад, UserViewModel керує станами користувача та аутентифікацією.
Ця клієнтська частина взаємодіє із серверною частиною реалізованою за допомогою ASP.NET Web Api, завдяки використанню POST, PUT, GET, DELETE HTTP-запитів. Також було створено UML діаграму компонент для демонстрації структури компонентів розробленої системи (див. А.3).

2.2 Програмна розробка системи

Основним функціоналом за який відповідає ця частина програмної системи є перегляд інформації про акваріуми, керування графіками годування для кожного з акваріумів, керування датчиками які в подальшому будуть використовуватись системою для іншої бізнес логіки.
Було розроблено діаграму станів (див. А.4) та UML діаграму активності (див. А.2) задля можливості демонстрації взаємодії користувача та програмної системи.

2.2.1 Сервіс AquariumApi

Це сервіс для взаємодії з API, що стосується акваріумів (AquariumApi). Він визначає інтерфейс AquariumApi з двома функціями: getAquariumById для отримання акваріуму за його ідентифікатором та getAquariumsForUser для отримання списку акваріумів користувача за ідентифікатором користувача. Інтерфейс приймає HttpClient, який використовується для виконання HTTP-запитів. Реалізація AquariumApiImpl використовує клієнт Ktor для виконання GET-запитів до віддаленого API, базуючись на заданому apiKey. Якщо запит виконано успішно, повертається відповідний об'єкт або список об'єктів Aquarium. У разі невдачі викидається виняток AquariumApiException з відповідним повідомленням про помилку.

2.2.2 Сервіс UserApi

Цей сервіс являє собою реалізацію інтерфейсу UserApi для взаємодії з користувачами в межах додатку AquaTrackMobile. Він надає три основні методи: loginUser, який дозволяє користувачеві авторизуватися за допомогою електронної пошти та пароля; getCurrentUser, який отримує інформацію про поточного користувача; та registerUser, який дозволяє створити новий обліковий запис користувача, надаючи електронну пошту, пароль та ім'я користувача. Ці методи взаємодіють з віддаленим API за допомогою HTTP-клієнта Ktor, відправляючи POST та GET запити з відповідними тілами запитів та отримуючи відповіді у форматі JSON. Також реалізовано обробку винятків LoginException та RegisterException для вирішення проблем, пов'язаних з авторизацією та реєстрацією користувачів..

2.2.3 Сервіс FeedingScheduleApi

Сервіс FeedingScheduleApi визначає методи для роботи з розкладами годування у додатку AquaTrackMobile. Він надає можливість отримувати списки розкладів годування за ідентифікатором акваріума, отримувати окремі розклади за ідентифікатором, додавати, оновлювати та видаляти розклади годування для поточного користувача. Ці методи взаємодіють з віддаленим API за допомогою HTTP-клієнта Ktor, відправляючи GET, POST, PUT та DELETE запити та обробляючи відповіді у форматі JSON. Також реалізовано виняток FeedingScheduleApiException для обробки помилок, пов'язаних з цими операціями.

2.2.4 Сервіс SensorDataApi

Сервіс SensorDataApi визначає методи для роботи з даними сенсорів у додатку AquaTrackMobile. Він забезпечує можливість отримувати список усіх даних сенсорів, отримувати окремі дані сенсора за ідентифікатором, додавати нові дані сенсора та видаляти існуючі дані сенсора. Ці методи також взаємодіють з віддаленим API за допомогою HTTP-клієнта Ktor, відправляючи GET, POST та DELETE запити та обробляючи відповіді у форматі JSON. Для обробки помилок під час виконання цих операцій реалізовано виняток SensorDataApiException.

2.3 Висновки

У результаті виконання цієї лабораторної роботи мною було розроблено клієнтську mobile частину, що є частиною системи для контролю акваріумів, описано архітектуру системи, програмну реалізацію, описано фізичну схему, її взаємодію з іншими частинами системи, створено діаграми.

ПЕРЕЛІК ДЖЕРЕЛ
1.	DEMO відео. URL: https://youtu.be/TD2TiO2l5a0?si=9AZ3cbX5wvPIjzSE
2.	Репозиторій проекту. URL: https://github.com/NureVolnykovKyrylo/apz-pzpi-21-2-volnykov-kyrylo
